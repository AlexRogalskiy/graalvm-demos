plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
}



version "0.1"
group "org.graalvm.demos.micronaut.service.frontend"

repositories {
    maven { url "https://jcenter.bintray.com" }
    maven {
        url  "https://dl.bintray.com/micronaut/core-releases-local"
    }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.2.6'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "javax.annotation:javax.annotation-api"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-views-freemarker"
    runtime 'org.freemarker:freemarker:2.3.29'
    compile project(":api")
    compileOnly "com.oracle.substratevm:svm"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "org.graalvm.demos.micronaut.service.frontend.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

/*
configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            //Makes anything in the io.netty group to have a particualr version
            if (details.requested.group == 'io.netty') {
                details.useVersion "4.1.43.Final"
            }
        }
    }
}
 */

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

task nativei(type: Exec) {
    commandLine 'native-image', '--no-server', '--verbose', '--enable-all-security-services', '-cp', 'build/libs/*'
}

nativei.dependsOn(assemble)
